/* Generated by AN DISI Unibo */ 
package it.unibo.status_controller

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Status_controller ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var status: wasteservice.gui.StatusUpdate = wasteservice.gui.StatusUpdate()
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						println("[StatusController] Started.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_idle") { //this:State
					action { //it:State
						println("[StatusController] Idle.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="state_update_storage",cond=whenDispatch("update_ws_storage"))
					transition(edgeName="t06",targetState="state_update_led",cond=whenEvent("trolley_state_changed"))
					transition(edgeName="t07",targetState="state_update_tt",cond=whenDispatch("update_trolley_position"))
				}	 
				state("state_update_storage") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("update_ws_storage(TYPE,AMOUNT)"), Term.createTerm("update_ws_storage(TYPE,AMOUNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val WasteType = payloadArg(0)
												val WasteAmount = payloadArg(1).toDouble()
								println("[StatusController] Storage state changed: $WasteAmount KG of $WasteType")
								if(  WasteType == "PLASTIC"  
								 ){ status.setCurrentPlastic(WasteAmount)  
								}
								if(  WasteType == "GLASS"  
								 ){ status.setCurrentGlass(WasteAmount)  
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_update_gui", cond=doswitch() )
				}	 
				state("state_update_led") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("trolley_state_changed(STATE)"), Term.createTerm("trolley_state_changed(STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val NewState = payloadArg(0)
								println("[StatusController] Trolley state changed: $NewState")
								 status.setLedState(wasteservice.Utils.getLedStateFromTrolleyState(NewState).toString())  
								 status.setTransportTrolleyState(NewState)  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_update_gui", cond=doswitch() )
				}	 
				state("state_update_tt") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("update_trolley_position(X,Y)"), Term.createTerm("update_trolley_position(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val X = payloadArg(0).toInt()
												val Y = payloadArg(1).toInt()
								println("[StatusController] Trolley position changed: ($X, $Y)")
								 status.setTransportTrolleyPosition(X, Y)  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_update_gui", cond=doswitch() )
				}	 
				state("state_update_gui") { //this:State
					action { //it:State
						println("[StatusController] Sent a new update for the GUI.")
						forward("update_statusgui", "update_statusgui" ,"gui_simulator" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
			}
		}
}
