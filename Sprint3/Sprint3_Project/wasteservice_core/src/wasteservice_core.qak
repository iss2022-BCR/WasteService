// PROJECT FINAL
System wasteservice_core

// MESSAGES AND EVENTS ========================================================
// SmartDevice (truck) -> TypesProvider
Request typesrequest:	typesrequest(_)
// TypesProvider -> SmartDevice
Reply typesreply:		typesreply(TYPES)

// SmartDevice (truck) -> WasteService
Request storerequest:	storerequest(TYPE, LOAD)
// WasteService -> SmartDevice
Reply loadaccepted:		loadaccepted(_)
Reply loadrejected:		loadrejected(_)

// WasteService -> TransportTrolley
Request deposit:			deposit(TYPE, LOAD)
// TransportTrolley -> WasteService
Reply pickupcompleted:		pickupcompleted(_)
// TransportTrolley -> WasteService
Dispatch depositcompleted:	depositcompleted(_)
Dispatch depositfailed:		depositfailed(REASON)

// TransportTrolley -> PathExecutorBCR
Request	dopath:		dopath(PATH, OWNER)
// PathExecutorBCR -> TransportTrolley
Reply dopathdone:	dopathdone(ARG)
Reply dopathfail:	dopathfail(ARG)

// Basicrobot
Dispatch cmd:		cmd(MOVE)
Dispatch end:		end(ARG)  
Request step:		step(TIME)
Reply stepdone:		stepdone(V)
Reply stepfail:		stepfail(V)
Event alarm:		alarm(X)
Event sonar:		sonar(DISTANCE)
Dispatch obstacle:	obstacle(ARG) 	//generated by distancefilter
Event info:			info(ARG) 	    //for external components, not coap-observed

// Sprint2
// Sonar -> AlarmController
Dispatch sonar_data:	sonar_data(DISTANCE)
// AlarmController -> PathExecutorBCR
Event stop:		stop(_)
// AlarmController -> PathExecutorBCR
Event resume:	resume(_)

// -> TrolleyStateProvider
Dispatch update_trolley_state:	update_trolley_state(STATE)
// TrolleyStateProvider -> LedController
Event trolley_state_changed:	trolley_state_changed(STATE)

Dispatch update_trolley_position:	update_trolley_position(X, Y)
Dispatch update_ws_storage:			update_ws_storage(TYPE, AMOUNT)

Dispatch update_statusgui:	update_statusgui(_)

// From GUI
Dispatch get_data: get_data(_)

// COAP
Dispatch coapUpdate : coapUpdate(RESOURCE, VALUE)

// CONTEXES ===================================================================
Context ctx_wasteservice		ip [host="localhost" port=11800]
Context ctx_transporttrolley	ip [host="localhost" port=11801]
Context ctx_robot				ip [host="localhost" port=8020]

Context ctx_raspberrypi			ip [host="192.168.1.5" port=11802]

// ACTORS =====================================================================
// CTX WasteService -----------------------------------------------------------
QActor typesprovider context ctx_wasteservice {
	[#
		var WasteTypes: String = wasteservice.Utils.getWasteTypesString("_")
	#]
	State state_init initial {
		println("[TypesProvider] Started. WasteTypes: $WasteTypes")
		discardMsg Off
	}
	Goto state_idle
	
	State state_idle {
		println("[TypesProvider] Waiting for type requests...")
	}
	Transition t0	whenRequest typesrequest	-> state_handle_wastetypes_request
	
	State state_handle_wastetypes_request {
		printCurrentMessage
		replyTo typesrequest with typesreply	: typesreply($WasteTypes) //caller== smartdevice_simulator
		println("[TypesProvider] Replied with types list: $WasteTypes")
	}
	Goto state_idle
}

QActor wasteservice context ctx_wasteservice {
	[#
		var RequestedWasteType: wasteservice.WasteType = wasteservice.WasteType.values()[0]
		var RequestedWasteWeight: Double = 1.0
		
		val WasteService = wasteservice.WasteService()
		
		var WaitingPickup: Boolean = false
		var WaitingDeposit: Boolean = false
	#]
	State state_init initial {
		println("[WasteService] Started.")
		println("[WasteService] Current storage:")
		[# WasteService.printFancyStatusString() #]
		discardMsg Off
	}
	Goto state_idle
	
	State state_idle {
		println("[WasteService] Waiting for store requests...")
	}
	Transition t0	whenRequest storerequest	-> state_handle_storerequest

	State state_handle_storerequest {
		printCurrentMessage
		onMsg(storerequest : storerequest(TYPE, LOAD)) {
			[#
				var Type = payloadArg(0)
				var Load = payloadArg(1)
			#]
			println("[WasteService] Received storerequest($Type, $Load)")
			
			if [# wasteservice.Utils.isValidWasteType(Type) &&
					wasteservice.Utils.isValidWasteWeight(Load) #]
			{
				[#
					RequestedWasteType = wasteservice.WasteType.valueOf(Type)
					RequestedWasteWeight = payloadArg(1).toDouble()
				#]
				
				if [# WasteService.canPreStore(RequestedWasteType, RequestedWasteWeight) #]
				{
					// Update the pre-storage counter
					[#
						WasteService.addToPreStorage(RequestedWasteType, RequestedWasteWeight)
					
						WaitingPickup = true
					#]
					println("[WasteService] There is enough space.")
					request transporttrolley -m deposit : deposit( $RequestedWasteType, $RequestedWasteWeight )
				}
				else
				{
					[# WaitingPickup = false #]
					
					[# wasteservice.Utils.printFail("[WasteService] Load rejected: there is not enough space in the container to store the load.") #]
					replyTo storerequest with loadrejected: loadrejected(_) //caller== smartdevice_simulator
				}
			}
			else
			{
				[# WaitingPickup = false #]
				
				[# wasteservice.Utils.printFail("[WasteService] Load rejected: one or more parameters are invalid.") #]
				replyTo storerequest with loadrejected: loadrejected(_) //caller== smartdevice_simulator
			}
			
			println("[WasteService] Current storage:")
			[# WasteService.printFancyStatusString() #]
		}
	}
	Goto state_idle if [# WaitingPickup == false #] else state_waiting_pickup
	
	State state_waiting_pickup {
		println("[WasteService] Waiting for pickup completion...")
	}
	Transition t1 whenReply pickupcompleted	-> state_pickup_completed
	
	State state_pickup_completed {
		[#
			WaitingPickup = false
			WaitingDeposit = true
		#]
		
		[# wasteservice.Utils.printCorrect("[WasteService] Pickup completed, sent Load Accepted.") #]
		replyTo storerequest with loadaccepted: loadaccepted(_) //caller== smartdevice_simulator
	}
	Goto state_waiting_deposit
	
	State state_waiting_deposit {
		println("[WasteService] Waiting for deposit completion...")
	}
	Transition t2	whenMsg depositcompleted	-> state_deposit_completed
					whenMsg depositfailed		-> state_deposit_failed
	
	State state_deposit_completed {
		// Update the actual storage counter
		[#
			WasteService.addToStorage(RequestedWasteType, RequestedWasteWeight)
			WaitingDeposit = false
			val CurrAmount = WasteService.getCurrentStorageForWasteType(RequestedWasteType)
		#]
		
		// Update Storage
		forward status_controller -m update_ws_storage: update_ws_storage($RequestedWasteType, $CurrAmount)
		
		println("[WasteService] Deposit completed. Current storage:")
		[# WasteService.printFancyStatusString() #]
	}
	Goto state_idle
	
	State state_deposit_failed {
		onMsg(depositfailed : depositfailed(REASON)) {
			// Reset the pre storage counter
			[#
				// Reset PreStorage
				
				WaitingDeposit = false
				var Error = payloadArg(0)
			#]
			println("[WasteService] Deposit failed: $Error.")
		}
		println("[WasteService] Current storage:")
		[# WasteService.printFancyStatusString() #]
	}
	Goto state_idle
}

/*
 * The GUIcontroller observes the components changes and updates the GUI accordingly
 */
QActor status_controller context ctx_wasteservice {
	// Keeps the current status of the system in a variable
	[#
		var status: wasteservice.gui.StatusUpdate = wasteservice.gui.StatusUpdate()
	#]
	State state_init initial {
		println("[GUIcontroller] Started.")
	}
	Goto state_idle
	
	State state_idle {
		//println("[GUIcontroller] Idle.")
	}
	Transition t0	whenMsg update_ws_storage		-> state_update_storage
					whenEvent trolley_state_changed -> state_update_led
					whenMsg update_trolley_position -> state_update_tt
					whenMsg get_data 				-> state_update_gui
					
	State state_update_storage {
		printCurrentMessage
		onMsg(update_ws_storage : update_ws_storage(TYPE, AMOUNT)) {
			[#
				val WasteType = payloadArg(0)
				val WasteAmount = payloadArg(1).toDouble()
			#]
			println("[GUIcontroller] Storage state changed: $WasteAmount KG of $WasteType")
			
			if [# WasteType == "PLASTIC" #] {
				[# status.setCurrentPlastic(WasteAmount) #]
			}
			if [# WasteType == "GLASS" #] {
				[# status.setCurrentGlass(WasteAmount) #]
			}
		}
	}
	Goto state_update_gui
	
	State state_update_led {
		onMsg(trolley_state_changed : trolley_state_changed(STATE)) {
			[#
				val NewState = payloadArg(0)
			#]
			println("[GUIcontroller] Trolley state changed: $NewState")
			
			[# status.setLedState(wasteservice.Utils.getLedStateFromTrolleyState(NewState).toString()) #]
			[# status.setTransportTrolleyState(NewState) #]
		}
	}
	Goto state_update_gui
	
	State state_update_tt {
		onMsg(update_trolley_position : update_trolley_position(X, Y)) {
			[#
				val X = payloadArg(0).toInt()
				val Y = payloadArg(1).toInt()
			#]
			println("[WasteService] Trolley position changed: ($X, $Y)")
			[# status.setTransportTrolleyPosition(X, Y) #]
		}
	}
	Goto state_update_gui
	
	State state_update_gui {
		println("[GUIcontroller] Sent a new update for the GUI.")
		
		updateResource [# wasteservice.gui.StatusUpdateParser.toJsonString(status) #]
	}
	Goto state_idle
}

// CTX TransportTrolley -------------------------------------------------------
QActor transporttrolley context ctx_transporttrolley {
	[# 
		var Actions: String = "" 
		var Progress = ""
		
		var WasteType: wasteservice.WasteType = wasteservice.WasteType.PLASTIC
		var WasteLoad: Double = 0.0
	#]
	State state_init initial {
		[#
			plannerBCR.initAI()
			plannerBCR.loadRoomMap("mapRoomEmpty")
			plannerBCR.showMap()
			plannerBCR.loadMapConfig("mapConfigWasteService")
			println("MapConfig:")
			plannerBCR.showFancyMapConfig()
		#]
		println("[TransportTrolley] Started.")
	}
	Goto state_idle
	
	State state_idle {
		//forward trolleystateprovider -m update_trolley_state: update_trolley_state(HOME)
		updateResource [# "transporttrolley(HOME)" #]
		
		println("[TransportTrolley] Waiting for deposit requests...")
	}
	Transition t0	whenRequest deposit		-> state_handle_deposit_request
	
	State state_handle_deposit_request {
		printCurrentMessage
		onMsg(deposit: deposit(TYPE, LOAD)) {
			[#
				WasteType = wasteservice.WasteType.valueOf(payloadArg(0))
				WasteLoad = payloadArg(1).toDouble()
			#]
			println("[TransportTrolley] Deposit request received.")
		}
	}
	Goto state_move_to_indoor
	
	State state_move_to_indoor {
		//forward trolleystateprovider -m update_trolley_state: update_trolley_state(MOVING)
		updateResource [# "transporttrolley(MOVING)" #]
		
		println("[TransportTrolley] Moving to INDOOR...")
		[#
			val curPos: Pair<Int, Int> = plannerBCR.get_curPos()
			val goal: Pair<Int, Int> = plannerBCR.getNearestPositionToCellType(curPos, "INDOOR")
			plannerBCR.setGoal(goal.first, goal.second)
			plannerBCR.doPlan()
			Actions = plannerBCR.getActionsString()
		#]
		request pathexecutorbcr -m dopath : dopath($Actions, transporttrolley)
	}
	Transition t1	whenReply dopathdone	-> state_pickup
					whenReply dopathfail	-> state_error
	
	State state_pickup {
		//forward trolleystateprovider -m update_trolley_state: update_trolley_state(PICKUP)
		updateResource [# "transporttrolley(PICKUP)" #]
		
		println("[TransportTrolley] Picking up the load of $WasteType...")
		[# wasteservice.Utils.simulateAction(WasteLoad) #]
		println("[TransportTrolley] Pickup completed.")
		
		replyTo deposit with pickupcompleted: pickupcompleted(_) caller== wasteservice
	}
	Goto state_move_to_box
	
	State state_move_to_box {
		//forward trolleystateprovider -m update_trolley_state: update_trolley_state(MOVING)
		updateResource [# "transporttrolley(MOVING)" #]
		
		println("[TransportTrolley] Moving to ${WasteType.name}_BOX...")
		[#
			val curPos: Pair<Int, Int> = plannerBCR.get_curPos()
			val goal: Pair<Int, Int> = plannerBCR.getNearestPositionToCellType(curPos, WasteType.name)
			plannerBCR.setGoal(goal.first, goal.second)
			plannerBCR.doPlan()
			Actions = plannerBCR.getActionsString()
		#]
		request pathexecutorbcr -m dopath : dopath($Actions, transporttrolley)
	}
	Transition t2	whenReply dopathdone	-> state_dump
					whenReply dopathfail	-> state_error
	
	State state_dump {
		//forward trolleystateprovider -m update_trolley_state: update_trolley_state(DUMP)
		updateResource [# "transporttrolley(DUMP)" #]
		
		println("[TransportTrolley] Dumping the load...")
		[# wasteservice.Utils.simulateAction(WasteLoad) #]
		
		println("[TransportTrolley] Dump completed.")
		
		forward wasteservice -m depositcompleted : depositcompleted(_)
	}
	Goto state_move_to_home
	
	State state_move_to_home {
		//forward trolleystateprovider -m update_trolley_state: update_trolley_state(MOVING)
		updateResource [# "transporttrolley(MOVING)" #]
		
		println("[TransportTrolley] Moving to HOME...")
		[#
			val curPos: Pair<Int, Int> = plannerBCR.get_curPos()
			val goal: Pair<Int, Int> = plannerBCR.getNearestPositionToCellType(curPos, "HOME")
			plannerBCR.setGoal(goal.first, goal.second)
			plannerBCR.doPlan()
			Actions = plannerBCR.getActionsString()
		#]
		request pathexecutorbcr -m dopath : dopath($Actions, transporttrolley)
		
		// TO-DO (Sprint2): Stop returning HOME in case a new request arrives
	}
	Transition t3	whenReply dopathdone	-> state_idle
					whenReply dopathfail	-> state_error

	State state_error {
		onMsg(dopathfail: dopathfail(PATH_STILL_TO_DO)) {
			[#
				var PathStillToDo = payloadArg(0)
			#]
			println("[TransportTrolley] An Error occurred while trying to move along a path.")
			println("[TransportTrolley] Path still to do: $PathStillToDo")
			
			// TO-DO: Return to HOME?
		}
	}
	Goto state_idle
}

QActor trolleystateprovider context ctx_transporttrolley {
	[#
		var TTState: wasteservice.TransportTrolleyState = wasteservice.TransportTrolleyState.HOME
	#]
	State state_init initial {
		observeResource transporttrolley
		observeResource pathexecutorbcr
		
		println("[TrolleyStateProvider] Started.")
	}
	Goto state_idle
	
	State state_idle {
		//println("[TrolleyStateProvider] Idle")
	}
	Transition t0	whenMsg coapUpdate				-> state_update_trolley_state
					whenMsg update_trolley_state	-> state_update_trolley_state
	
	State state_update_trolley_state {
		onMsg(coapUpdate: coapUpdate(RESOURCE, VALUE)) {
			if [# wasteservice.TransportTrolleyState.parseFromMessage(payloadArg(1)) != TTState #] {
				[# TTState = wasteservice.TransportTrolleyState.parseFromMessage(payloadArg(1)) #]
	    		println("[TrolleyStateProvider] New state. Resource: ${payloadArg(0)}; Value: ${TTState.name}")
				emit trolley_state_changed: trolley_state_changed($TTState)
			}
		}
		onMsg(update_trolley_state: update_trolley_state(STATE)) {
			if [# wasteservice.TransportTrolleyState.parseFromMessage(payloadArg(1)) != TTState #] {
				[# TTState = wasteservice.TransportTrolleyState.parseFromMessage(payloadArg(1)) #]
	    		println("[TrolleyStateProvider] New state. Value: ${TTState.name}")
				emit trolley_state_changed: trolley_state_changed($TTState)
			}
		}
	}
	Goto state_idle
}

QActor pathexecutorbcr context ctx_transporttrolley {
	[# 
		var CurMoveTodo = ""
		var MovesDone = ""
		var TotPathMoves = 0
	#]
	
	State state_init initial {
		println("[PathExecutorBCR] Started.")
	}
	Goto state_idle
	
	State state_idle {
		[# 
			CurMoveTodo = ""
			TotPathMoves = 0
			sysUtil.logMsgs = true
		#]
		println("[PathExecutorBCR] Waiting for a path...")
	}
	Transition t0	whenRequest dopath	-> state_do_path
					whenEvent stop		-> state_stop
	
	State state_do_path {
		//printCurrentMessage
		onMsg(dopath: dopath(P, C)) {
			[# 
				val path = payloadArg(0)
				pathut.setPath(path)
				MovesDone = ""
				TotPathMoves = pathut.getPathTodo().length
			#]
			println("$path")
		}
		
		println("[PathExecutorBCR] Path to do: ${pathut.getPathTodo()}")
	}
	Goto state_next_move
	
	State state_next_move {
		[# CurMoveTodo = pathut.nextMove() #]
		[# MovesDone += CurMoveTodo #]
		println("[PathExecutorBCR] Current move to do: $CurMoveTodo")
		
	}
	Goto state_end_work_ok if [# CurMoveTodo.length == 0 #] else state_do_move
	
	/*State state_check_interrupt {
		
	}
	Transition t1	whenTime 350			-> state_do_move
					whenEvent startAlarm	-> state_stop*/
	
	State state_do_move {
		[#
			plannerBCR.updateMap(CurMoveTodo, "")
			// plannerBCR.showMap()
			// plannerBCR.showCurrentRobotState()	
		#]
		delay 350
		
		// Update Trolley Position
		[#
			val X = plannerBCR.get_curPos().first
			val Y = plannerBCR.get_curPos().second
		#]
		forward status_controller -m update_trolley_position: update_trolley_position($X, $Y)
	}
	Goto state_do_move_forward if [# CurMoveTodo == "w" #] else state_do_move_turn
	
	State state_do_move_forward {
		request basicrobot -m step: step(350)
		delay 350
	}
	Transition t1	whenEvent stop		-> state_stop
					whenReply stepdone	-> state_next_move
					whenReply stepfail	-> state_end_work_fail
	
	State state_do_move_turn {
		forward basicrobot -m cmd: cmd($CurMoveTodo)
	}
	Transition t2	whenTime 350	-> state_next_move
					whenEvent stop	-> state_stop
	
	State state_end_work_ok {
		[# MovesDone = "" #]
		println("[PathExecutorBCR] Path done.")
		replyTo dopath with dopathdone: dopathdone( ok ) caller== transporttrolley
	}
	Goto state_idle
	
	State state_end_work_fail {
		[# var PathStillTodo = pathut.getPathTodo() #]
		println("[PathExecutorBCR] Path failure. Path still to do: $PathStillTodo")
		replyTo dopath with dopathfail: dopathfail( $PathStillTodo ) caller== transporttrolley
		
		println("[PathExecutorBCR] Out of service.")
		// NB: no more transitions since the WasteService is no longer operative
		// this state could be caused by an out of sync between the PathExec position and
		// the actual Robot position -> better to terminate the application
		
		terminate 1
	}
	
	State state_stop {
		//forward trolleystateprovider -m update_trolley_state: update_trolley_state(STOPPED)
		updateResource [# "transporttrolley(STOPPED)" #]
		
		[# var PathTodo = pathut.getPathTodo() #]
		println("[PathExecutorBCR] Alarm detected, trolley stopped. Path to do: $PathTodo")
	}
	Transition t3 whenEvent resume -> state_resume
	
	State state_resume {
		if [# MovesDone.length != TotPathMoves #] {
			//forward trolleystateprovider -m update_trolley_state: update_trolley_state(MOVING)
			updateResource [# "transporttrolley(MOVING)" #]
		} else {
			//forward trolleystateprovider -m update_trolley_state: update_trolley_state(HOME)
			updateResource [# "transporttrolley(HOME)" #]
		}
		
		
		println("[PathExecutorBCR] Alarm retracted. Resuming...")
	}
	Goto state_next_move if [# MovesDone.length != TotPathMoves #] else state_idle
}

// CTX Robot ------------------------------------------------------------------
QActor basicrobot context ctx_robot {
[#
  var StepTime      = 0L
  var StartTime     = 0L     
  var Duration      = 0L  
  var RobotType     = "" 
  var CurrentMove   = "unkknown"
#]  
 	State s0 initial { 	      
 		discardMsg Off  //WE want receive any msg
 		//[# unibo.comm22.utils.CommSystemConfig.tracing = false #]  //tracing at unibo.comm22 level
		println("basicrobot | START")	
 		qrun unibo.robot.robotSupport.create(myself,"basicrobotConfig.json")	
 		[# RobotType = unibo.robot.robotSupport.robotKind #]
 		delay 1000  //give to the realsonar the time to start
        if[# RobotType != "virtual" #]{
        	[# var robotsonar = context!!.hasActor("realsonar")  
        	   if(robotsonar != null) unibo.robot.robotSupport.createSonarPipe(robotsonar) 
        	#] 
  		}//The Virtual robot sonar is created in virtualrobotSupport2021
 
  		//run unibo.robot.robotSupport.move( "a" )    //synch
 		//run unibo.robot.robotSupport.move( "d" )	//synch
    		//run unibo.robot.robotSupport.move( "w" )    //asynch
 		updateResource [# "basicrobot(start)" #]
 	} 
	Goto work
	
	State work{ 
		println("basicrobot  | waiting .................. ")  
	} 
	Transition t1   whenMsg     cmd       -> execcmd
					whenRequest step      -> doStep			 
					whenMsg    obstacle   -> handleObstacle  //in virtualrobot caused by the move w/s
					//whenEvent sonar       -> handleSonar
				  	whenMsg     end       -> endwork			  
	
	State execcmd{
		printCurrentMessage
		onMsg( cmd : cmd(MOVE) ){
  			//activate the motors  
  			[# CurrentMove = payloadArg(0) #]
			run unibo.robot.robotSupport.move( payloadArg(0 ) )
			updateResource [# "moveactivated(${payloadArg(0)})" #]
		}
	 }
	 Goto work   
	 
	State handleObstacle{
		//println("basicrobotttttttttt | handleObstacle ${CurrentMove}")	
		//run unibo.robot.robotSupport.move( "h" ) //non importa 
		//printCurrentMessage
		updateResource [# "obstacle(${CurrentMove})" #]
		//JUNE22: behavior embedded in VirtualrobotSupport2021
		 
		//if[# CurrentMove == "w" #]{
		//back to avoid emission of obstacle again if real robot moving forward !!!
		//if[# RobotType != "virtual" #]{	
		//	run unibo.robot.robotSupport.move( "s" )
		//	delay 100 
		//	run unibo.robot.robotSupport.move( "h" ) 
 		//}
 		//emit info : info( obstacledoing(w) )
	}
	Goto work  
 
	State handleSonar{
		printCurrentMessage
	}
	Goto work
		
   	State doStep{ 
 		printCurrentMessage  
		onMsg( step : step( T ) ){  
			[#	StepTime = payloadArg(0).toLong() 	#]  
			updateResource [# "step(${StepTime})" #]
  		}  
        memoCurrentTime StartTime  
        println("basicrobot | doStep StepTime =$StepTime  ")        
        run unibo.robot.robotSupport.move( "w" )  //moves a real robot forever !!!
	}  
	Transition t0
		whenTimeVar StepTime  -> stepDone  	 
 		whenMsg  obstacle     -> stepFail		
    	 
	
	State stepDone{   
 		run unibo.robot.robotSupport.move( "h" )  //stop the real robot already done ???
		updateResource [# "stepDone($StepTime)" #]
   		//emit info : info( stepdone($StepTime) )
   		replyTo step with stepdone : stepdone(ok) caller== pathexecutorbcr
		println("basicrobot | stepDone reply done")
  	}
	Goto work  

	State stepFail{  	 	
		setDuration Duration from StartTime
		run unibo.robot.robotSupport.move( "h" )  //stop the (real) robot
		//[# var TunedDuration =  Duration * 5 / 6 #]
		//[# var TunedDuration   = kotlin.math.round( (StepTime - Duration) * 15 / 100 ) #]
		[# var TunedDuration   =  ((StepTime - Duration) * 15 / 100).toLong()   #]
		println("basicrobot | stepFail duration=$Duration TunedDuration=$TunedDuration")
			run unibo.robot.robotSupport.move( "s" )
			delayVar TunedDuration 
			run unibo.robot.robotSupport.move( "h" ) 
 		updateResource [# "stepFail($Duration)" #] 
 		//emit info : info( stepFail($Duration) )
 		replyTo step with stepfail : stepfail($Duration, obst) caller== pathexecutorbcr
    }
	Goto work
	
	State endwork{
		updateResource [# "basicrobot(end)" #]
 		terminate 1
	}
}

// CTX RaspberryPi ------------------------------------------------------------
ExternalQActor sonar_bcr				context ctx_raspberrypi
ExternalQActor led_bcr					context ctx_raspberrypi
ExternalQActor buzzer_bcr				context ctx_raspberrypi
ExternalQActor textdisplay_bcr			context ctx_raspberrypi