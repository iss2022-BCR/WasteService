/* Generated by AN DISI Unibo */ 
package it.unibo.gui_updater

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Gui_updater ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var status: wasteservice.gui.StatusUpdate = wasteservice.gui.StatusUpdate()
				
				var rand = java.util.Random()
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						println("[GUIupdater] Started.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_idle") { //this:State
					action { //it:State
						println("[GUIupdater] Idle")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="state_send_update",cond=whenDispatch("get_data"))
				}	 
				state("state_send_update") { //this:State
					action { //it:State
						println("[GUIupdater] Sending StatusUpdate...")
						 var coords = status.getTransportTrolleyPosition()  
						if(  coords[0] == 4  
						 ){ 
										coords[0] = 0
										status.setTransportTrolleyPosition(coords) 
						}
						else
						 { 
						 				coords[0]++
						 				status.setTransportTrolleyPosition(coords) 
						 }
						 status.setCurrentPlastic(rand.nextDouble((100.0 + 1) - 0.0) + 0.0)  
						 status.setCurrentGlass(rand.nextDouble((100.0 + 1) - 0.0) + 0.0)  
						 var ttstate = rand.nextInt((4 + 1) - 1) + 1  
						if(  ttstate == 1  
						 ){ status.setTransportTrolleyState("HOME")  
						}
						if(  ttstate == 2  
						 ){ status.setTransportTrolleyState("MOVING")  
						}
						if(  ttstate == 3  
						 ){ status.setTransportTrolleyState("PICKUP")  
						}
						if(  ttstate == 4  
						 ){ status.setTransportTrolleyState("DUMP")  
						}
						 var ledstate = rand.nextInt((3 + 1) - 1) + 1  
						if(  ledstate == 1  
						 ){ status.setLedState("OFF")  
						}
						if(  ledstate == 2  
						 ){ status.setLedState("ON")  
						 status.setTransportTrolleyState("STOPPED")  
						}
						if(  ledstate == 3  
						 ){ status.setLedState("BLINKING")  
						}
						updateResourceRep( wasteservice.gui.StatusUpdateParser.toJsonString(status)  
						)
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_send_update", cond=doswitch() )
				}	 
			}
		}
}
