System sprint0_system_overview

// MESSAGES AND EVENTS ========================================================
// SmartDevice (truck) -> WasteService
Request storerequest:	storerequest(
							wasteType, 
							truckLoad
						)

// WasteService -> SmartDevice
Reply loadaccepted:		loadaccepted(_)
Reply loadrejected:		loadrejected(_)
// WasteService -> TransportTrolley
Dispatch doDeposit:		doDeposit(Type, Weight)

Dispatch stop:			stop(_)
Dispatch resume:		resume(_)

// TransportTrolley -> BasicRobot
Dispatch cmd:			cmd(_)
Request step:			step(_)

// WasteService -> WasteServiceStatusGUI
Dispatch updategui: 	updategui(
							trolleyState, 
							trolleyPosition, 
							currentPlastic, 
							currentGlass,
							ledState
						)

// WasteService -> Raspberry
Dispatch updateled: 	updateled(LedStatus)

// AlarmDevice -> WasteService
Dispatch distance:		distance(V)


// CONTEXTS ===================================================================
Context ctx_wasteservice		ip [host="localhost" port=11800]
Context ctx_monitor				ip [host="localhost" port=11801]
Context ctx_raspdevice			ip [host="localhost" port=11802]
Context ctx_smartdevice_test	ip [host="localhost" port=11803]
Context ctx_basicrobot      	ip [host="localhost" port=11810]

// ACTORS =====================================================================
ExternalQActor basicrobot context ctx_basicrobot

// ACTORS for ctx_smartdevice_test --------------------------------------------
/*
 * Test Actor:
 * The truck driver approaches the waste service area at INDOOR, and sends a storerequest
 */
QActor smartdevice_test context ctx_smartdevice_test {
	State state_init initial {
		println("[SmartDevice_Test] Sending a store request to WasteService...")
		request wasteservice -m		storerequest: storerequest(_)
	}
}

// ACTORS for ctx_wasteservice ------------------------------------------------
QActor wasteservice context ctx_wasteservice {
	[#
		var CurrentPlastic: Float = 0.0f
		var CurrentGlass: Float = 0.0f
		var Type: wasteservice.WasteType
		var TruckLoad: Float
	#]
	State state_init initial {
		[#
			var CurrentPlastic = 0.0f
			var CurrentGlass = 0.0f
		#]
		printCurrentMessage
		println("[WasteService] Reset:")
		println("\tPlastic: $CurrentPlastic / ${wasteservice.Constants.MAXPB} KG")
		println("\tGlass: $CurrentGlass / ${wasteservice.Constants.MAXGB} KG")
	}
	Goto state_idle
	
	State state_idle {
		println("[WasteService] Idle...")
		// wait for messages...
	}
	Transition t0	whenRequest storerequest	-> state_handle_store
					whenMsg distance 			-> state_handle_distance
					
	State state_handle_store {
		printCurrentMessage
		onMsg(storerequest: storerequest(TYPE, TRUCKLOAD)) {
			[#
				Type = wasteservice.WasteType.valueOf(payloadArg(0))
				TruckLoad = payloadArg(1).toFloat()
			#]
			if	[#
					// enough space
					(Type == wasteservice.WasteType.PLASTIC && CurrentPlastic + TruckLoad <= wasteservice.Constants.MAXPB) ||
					(Type == wasteservice.WasteType.GLASS && CurrentGlass + TruckLoad <= wasteservice.Constants.MAXGB)
				#] 
			{
				[#
				if (Type == wasteservice.WasteType.PLASTIC) {
					CurrentPlastic += TruckLoad 
				}
				else {
					CurrentGlass += TruckLoad
				}
				#]
				replyTo storerequest with loadaccepted: loadaccepted(_)
				forward transporttrolley -m doDeposit: doDeposit(TYPE, WEIGHT)
				
				delay 1000 // pickup time (known)
			}
			else {
				replyTo storerequest with loadrejected: loadaccepted(_)
			}
			forward wasteservicestatusgui -m updategui: updategui(_)
			
			println("\tPlastic: $CurrentPlastic / ${wasteservice.Constants.MAXPB} KG")
			println("\tGlass: $CurrentGlass / ${wasteservice.Constants.MAXGB} KG")
		}
		
		
	}
	Goto state_idle
	
	State state_handle_distance {
		onMsg(distance: distance(V)) {
			if [# payloadArg(0).toFloat() >= wasteservice.Constants.DLIMT #] {
				// state_handle_stop
				forward transporttrolley -m stop: stop(_)
			} else {
				// state_handle_resume
				forward transporttrolley -m resume: resume(_)
			}
		}
	}
	Goto state_idle
}

QActor transporttrolley context ctx_wasteservice {
	State state_init initial {
		// go at home
		forward warningdevice -m updateled: updateled(_)
		forward wasteservicestatusgui -m updategui: updategui(_)
	}
	Goto state_idle
	
	State state_idle {
		forward wasteservicestatusgui -m updategui: updategui(_)
		
	}
	Transition t0	whenTime 5000		-> state_idle
					whenMsg doDeposit	-> state_deposit
					whenMsg	stop 		-> state_handle_stop
	
	State state_deposit {
		println("[TransportTrolley] Performing deposit action...")
		// TO-DO
		// pickup 
		// move
		// store
		request basicrobot -m step : step(_)
		forward basicrobot -m cmd : cmd(_)
		
		forward warningdevice -m updateled: updateled(_)
		forward wasteservicestatusgui -m updategui: updategui(_)
		
		println("[TransportTrolley] Deposit action concluded.")
	}
	Goto state_idle
	
	State state_handle_stop {
		// do something
	}
	Transition t0	whenMsg resume		-> state_handle_resume
	
	State state_handle_resume {
		// do something
		
		returnFromInterrupt
	}
}

// ACTORS for ctx_raspdevice --------------------------------------------------
/*
 * Gets distance from sonar and sends alarm messages
 */
QActor alarmdevice context ctx_raspdevice {
	State state_init initial {
		println("[AlarmDevice] Init")
	}
	Goto state_alarm
	
	State state_alarm {
		// send msg (while?)
		delay 2000
		
		forward wasteservice -m distance: distance(_)
	}
}
QActor warningdevice context ctx_raspdevice {
	State state_init initial {
		println("[WarningDevice] Initializing...")
	}
	
	State state_update {
		onMsg(updateled:	update_led(ARG)){
			/*[# newState = wasteservice.LedStatus.valueOf(payloadArg(0)) #]*/
			//println("update_led(${newState})")
			/*[# val stateName = when(newState) {
						wasteservice.LedStatus.OFF -> "off"
						wasteservice.LedStatus.ON -> "on"
						wasteservice.LedStatus.BLINK -> "blink_on"
					}
				transitNow(stateName)
			#]*/
		}
	}
	
	State state_off {
		
	}
	Transition t0	whenMsg updateled	-> state_update
	
	State state_on {
		
	}
	Transition t0	whenMsg updateled	-> state_update
	
	State state_blinking {
		
	}
	Transition t0	whenMsg updateled	-> state_update
}

// ACTORS for ctx_monitor -----------------------------------------------------
/*
 * Receives updates from waste service and 
 */
QActor wasteservicestatusgui context ctx_monitor {
	[#
		var trolleyState: wasteservice.TrolleyState = wasteservice.TrolleyState.IDLE
		var trolleyPosition: wasteservice.TrolleyPosition = wasteservice.TrolleyPosition.HOME
		var currentPlastic: Float = 0.0f
		var currentGlass: Float = 0.0f
		var ledStatus: wasteservice.LedStatus = wasteservice.LedStatus.OFF
	#]
	State state_init initial {
		println("[WasteServiceStatusGUI] Initializing...")
		[#
			trolleyState = wasteservice.TrolleyState.IDLE
			trolleyPosition = wasteservice.TrolleyPosition.HOME
			currentPlastic = 0.0f
			currentGlass = 0.0f
			ledStatus = wasteservice.LedStatus.OFF
		#]
		println("[WasteServiceStatusGUI] Initialization completed. Current state:")
		println("TrolleyState: $trolleyState")
		println("TrolleyPosition: $trolleyPosition")
		println("Plastic: $currentPlastic KG")
		println("Glass: $currentGlass KG")
		println("LedStatus: $ledStatus")
	}
	Goto state_idle
	
	State state_idle {
		println("[WasteServiceStatusGUI] Waiting for updates...")
		// wait for messages
	}
	Transition t0 	whenMsg updategui -> state_handle_update
	
	State state_handle_update {
		// TO-DO: get message info and update state
		println("[WasteServiceStatusGUI] State:")
		println("TrolleyState: $trolleyState")
		println("TrolleyPosition: $trolleyPosition")
		println("Plastic: $currentPlastic KG")
		println("Glass: $currentGlass KG")
		println("LedStatus: $ledStatus")
	}
	Goto state_idle
}
