/* Generated by AN DISI Unibo */ 
package it.unibo.test_wasteservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Test_wasteservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var CurrentPlastic: Float = 0.0f
				var CurrentGlass: Float = 0.0f
				var Type: wasteservice.WasteType
				var TruckLoad: Float
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_idle") { //this:State
					action { //it:State
						println("[Test_WasteService] Waiting for messages...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t10",targetState="state_handle_store",cond=whenRequest("storerequest"))
				}	 
				state("state_handle_store") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("storerequest(TYPE,TRUCKLOAD)"), Term.createTerm("storerequest(TYPE,TRUCKLOAD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												Type = wasteservice.WasteType.valueOf(payloadArg(0))
												TruckLoad = payloadArg(1).toFloat()
								if( 
													// enough space
													(Type == wasteservice.WasteType.PLASTIC && CurrentPlastic + TruckLoad <= wasteservice.Constants.MAXPB) ||
													(Type == wasteservice.WasteType.GLASS && CurrentGlass + TruckLoad <= wasteservice.Constants.MAXGB)
								 ){
													if (Type == wasteservice.WasteType.PLASTIC) {
														CurrentPlastic += TruckLoad 
													}
													else {
														CurrentGlass += TruckLoad
													}
								println("[Test_WasteService] Load accepted ($TruckLoad KG of $Type).")
								answer("storerequest", "loadaccepted", "loadaccepted(_)"   )  
								}
								else
								 {println("[Test_WasteService] Load rejected")
								 answer("storerequest", "loadrejected", "loadaccepted(_)"   )  
								 }
								println("[Test_WasteService] State:")
								println("	Plastic: ${CurrentPlastic}/ ${wasteservice.Constants.MAXPB} KG, Glass: ${CurrentGlass} / ${wasteservice.Constants.MAXPB} KG")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
			}
		}
}
