/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservicestatusgui

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservicestatusgui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var trolleyState: wasteservice.TrolleyState = wasteservice.TrolleyState.IDLE
				var trolleyPosition: wasteservice.TrolleyPosition = wasteservice.TrolleyPosition.HOME
				var currentPlastic: Float = 0.0f
				var currentGlass: Float = 0.0f
				var ledStatus: wasteservice.LedStatus = wasteservice.LedStatus.OFF
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						println("[WasteServiceStatusGUI] Initializing...")
						
									trolleyState = wasteservice.TrolleyState.IDLE
									trolleyPosition = wasteservice.TrolleyPosition.HOME
									currentPlastic = 0.0f
									currentGlass = 0.0f
									ledStatus = wasteservice.LedStatus.OFF
						println("[WasteServiceStatusGUI] Initialization completed. Current state:")
						println("TrolleyState: $trolleyState")
						println("TrolleyPosition: $trolleyPosition")
						println("Plastic: $currentPlastic KG")
						println("Glass: $currentGlass KG")
						println("LedStatus: $ledStatus")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_idle") { //this:State
					action { //it:State
						println("[WasteServiceStatusGUI] Waiting for updates...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="state_handle_update",cond=whenDispatch("updategui"))
				}	 
				state("state_handle_update") { //this:State
					action { //it:State
						println("[WasteServiceStatusGUI] State:")
						println("TrolleyState: $trolleyState")
						println("TrolleyPosition: $trolleyPosition")
						println("Plastic: $currentPlastic KG")
						println("Glass: $currentGlass KG")
						println("LedStatus: $ledStatus")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
			}
		}
}
