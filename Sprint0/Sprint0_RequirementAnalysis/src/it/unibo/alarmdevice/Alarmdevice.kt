/* Generated by AN DISI Unibo */ 
package it.unibo.alarmdevice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Alarmdevice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						println("[AlarmDevice] Initializing...")
						
									var distance =		0.0F
						println("[AlarmDevice] Initialization completed. Current state:
						
												Distance: $distance")
					}
					 transition( edgeName="goto",targetState="state_alarm", cond=doswitch() )
				}	 
				state("state_alarm") { //this:State
					action { //it:State
						delay(2000) 
						forward("distance", "distance(_)" ,"wasteservice" ) 
					}
				}	 
			}
		}
}
