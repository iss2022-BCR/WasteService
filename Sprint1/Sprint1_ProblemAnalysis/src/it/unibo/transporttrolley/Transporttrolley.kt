/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var WasteType: wasteservice.WasteType = wasteservice.WasteType.PLASTIC
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						println("[TransportTrolley] Started")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_idle") { //this:State
					action { //it:State
						println("[TransportTrolley] Waiting for deposit requests...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t16",targetState="state_handle_deposit_request",cond=whenRequest("deposit"))
				}	 
				state("state_handle_deposit_request") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("deposit(TYPE)"), Term.createTerm("deposit(TYPE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 WasteType = wasteservice.WasteType.valueOf(payloadArg(0))  
								println("[TransportTrolley] Deposit request received.")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_movingToINDOOR", cond=doswitch() )
				}	 
				state("state_movingToINDOOR") { //this:State
					action { //it:State
						println("[TransportTrolley] Moving to INDOOR...")
						forward("cmd", "cmd(w)" ,"basicrobot" ) 
						delay(1200) 
						forward("cmd", "cmd(s)" ,"basicrobot" ) 
						delay(1200) 
						request("step", "step(500)" ,"basicrobot" )  
						delay(600) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_pickup", cond=doswitch() )
				}	 
				state("state_pickup") { //this:State
					action { //it:State
						println("[TransportTrolley] Picking up the load of $WasteType...")
						delay(1000) 
						println("[TransportTrolley] Pickup completed.")
						answer("deposit", "pickupcompleted", "pickupcompleted(_)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_moveToGLASSBOX", cond=doswitchGuarded({ WasteType == wasteservice.WasteType.GLASS  
					}) )
					transition( edgeName="goto",targetState="state_moveToPLASTICBOX", cond=doswitchGuarded({! ( WasteType == wasteservice.WasteType.GLASS  
					) }) )
				}	 
				state("state_moveToGLASSBOX") { //this:State
					action { //it:State
						println("[TransportTrolley] Moving to GLASS_BOX...")
						forward("cmd", "cmd(w)" ,"basicrobot" ) 
						request("step", "step(500)" ,"basicrobot" )  
						delay(1000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_dump", cond=doswitch() )
				}	 
				state("state_moveToPLASTICBOX") { //this:State
					action { //it:State
						println("[TransportTrolley] Moving to PLASTIC_BOX...")
						forward("cmd", "cmd(w)" ,"basicrobot" ) 
						request("step", "step(500)" ,"basicrobot" )  
						delay(1000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_dump", cond=doswitch() )
				}	 
				state("state_dump") { //this:State
					action { //it:State
						println("[TransportTrolley] Dumping the load...")
						delay(1000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_moveToHOME", cond=doswitch() )
				}	 
				state("state_moveToHOME") { //this:State
					action { //it:State
						println("[TransportTrolley] Moving to HOME...")
						forward("cmd", "cmd(w)" ,"basicrobot" ) 
						request("step", "step(500)" ,"basicrobot" )  
						delay(1000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
			}
		}
}
