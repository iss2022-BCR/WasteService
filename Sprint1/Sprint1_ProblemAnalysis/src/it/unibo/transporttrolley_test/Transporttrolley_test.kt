/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley_test

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley_test ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var WasteType: wasteservice.WasteType = wasteservice.WasteType.PLASTIC
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						println("[TransportTrolley] Started")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_idle") { //this:State
					action { //it:State
						println("[TransportTrolley] Waiting for deposit requests...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t12",targetState="state_handle_deposit_request",cond=whenRequest("deposit"))
				}	 
				state("state_handle_deposit_request") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("deposit(TYPE)"), Term.createTerm("deposit(TYPE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 WasteType = wasteservice.WasteType.valueOf(payloadArg(0))  
								println("[TransportTrolley] Deposit request received.")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_pickup", cond=doswitch() )
				}	 
				state("state_pickup") { //this:State
					action { //it:State
						println("[TransportTrolley] Moving to INDOOR...")
						delay(1500) 
						println("[TransportTrolley] Picking up...")
						delay(1000) 
						println("[TransportTrolley] Pick up completed...")
						answer("deposit", "pickupcompleted", "pickupcompleted(_)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
			}
		}
}
