/* Generated by AN DISI Unibo */ 
package it.unibo.trolleymover

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolleymover ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var Actions = ""
				var Loc = ""
				var IsMoving = false
				SystemConfig.setTheConfiguration("SystemConfiguration")
				planner.initAI()
				planner.loadRoomMap("mapRoomEmpty")
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("	TROLLEYMOVER | started.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("	TROLLEYMOVER | waiting...")
						 IsMoving = false  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t010",targetState="handleMovement",cond=whenRequest("move"))
				}	 
				state("handleMovement") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("move(LOCATION)"), Term.createTerm("move(LOCATION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Loc = payloadArg(0)  
						}
						println("	TROLLEYMOVER | received movement to $Loc")
						if(  IsMoving  
						 ){updateResourceRep( "trolleymover(handleMovement_stopPath)"  
						)
						println("	TROLLEYMOVER | arrived move command when moving")
						request("stopPath", "stopPath(_)" ,"pather" )  
						}
						else
						 {
						 				var coord = utils.getClosestCoordinate(planner.get_curCoord(), Loc)
						 				planner.setGoal(coord.x, coord.y)
						 				planner.doPlan()
						 				Actions = planner.getActionsString()
						 				IsMoving = true
						 updateResourceRep( "trolleymover(handleMovement_$Loc)"  
						 )
						 println("	TROLLEYMOVER | actions: $Actions")
						 request("doPath", "doPath($Actions,trolleymover)" ,"pather" )  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t111",targetState="handlePathDone",cond=whenReply("doPathDone"))
					transition(edgeName="t112",targetState="handlePathFail",cond=whenReply("doPathFail"))
					transition(edgeName="t113",targetState="handleInterruptedMovement",cond=whenReply("stopAck"))
					transition(edgeName="t114",targetState="handleMovement",cond=whenRequest("move"))
				}	 
				state("handleInterruptedMovement") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("stopAck(_)"), Term.createTerm("stopAck(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 IsMoving = false  
								updateResourceRep( "trolleymover(handleInterruptedMovement)"  
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="handleMovement", cond=doswitch() )
				}	 
				state("handlePathDone") { //this:State
					action { //it:State
						 
									IsMoving = false
									val pos = planner.get_curCoord()
									planner.showMap()
						updateResourceRep( "trolleymover(handlePathDone_$Loc, POS: ${pos.x}_${pos.y})"  
						)
						println("	TROLLEYMOVER | arrived to $Loc")
						answer("move", "moveDone", "moveDone(OK)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handlePathFail") { //this:State
					action { //it:State
						 IsMoving = false  
						updateResourceRep( "trolleymover(handlePathFail_$Loc)"  
						)
						println("	TROLLEYMOVER | path failed to $Loc")
						answer("move", "moveDone", "moveDone(NO)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
