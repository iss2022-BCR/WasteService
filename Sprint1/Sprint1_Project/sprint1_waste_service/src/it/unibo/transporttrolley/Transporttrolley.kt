/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var Actions: String = "" 
				var Progress = ""
				planner.initAI()
				planner.loadRoomMap("mapRoomEmpty")
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						println("[TransportTrolley] Started")
						forward("cmd", "cmd(w)" ,"basicrobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("state_idle") { //this:State
					action { //it:State
						println("[TransportTrolley] Waiting for deposit actions...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t12",targetState="state_handle_deposit_request",cond=whenRequest("deposit"))
				}	 
				state("state_handle_deposit_request") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("deposit(TYPE)"), Term.createTerm("deposit(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[TransportTrolley] Received deposit request...")
								
												planner.setGoal(4, 3)
												planner.doPlan()
												Actions = planner.getActionsString()
								request("dopath", "dopath($Actions,trolleymover)" ,"pathexecutor" )  
								answer("deposit", "depositcompleted", "depositcompleted(_)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t13",targetState="state_handle_deposit_request",cond=whenReply("dopathdone"))
				}	 
				state("state_pickup") { //this:State
					action { //it:State
						println("[TransportTrolley] Handling deposit action...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_deposit", cond=doswitch() )
				}	 
				state("state_deposit") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_dump", cond=doswitch() )
				}	 
				state("state_dump") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_going_home", cond=doswitch() )
				}	 
				state("state_going_home") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
			}
		}
}
