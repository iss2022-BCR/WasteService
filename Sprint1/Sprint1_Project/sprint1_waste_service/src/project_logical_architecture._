// PROJECT
System logical_architecture_waste_service

// MESSAGES AND EVENTS ========================================================
// SmartDevice (truck) -> TypesProvider
Request typesrequest	:	typesrequest(_)
// TypesProvider -> SmartDevice
Reply typesreply	:	typesreply(TYPES)

// SmartDevice (truck) -> WasteService
Request storerequest	:	storerequest(TYPE, LOAD)
// WasteService -> SmartDevice
Reply loadaccepted	:	loadaccepted(_)
Reply loadrejected	:	loadrejected(_)

// WasteService -> TransportTrolley
Request deposit		:	deposit(TYPE)
// TransportTrolley -> WasteService
Reply pickupcompleted	: pickupcompleted(_)
// TransportTrolley -> WasteService
Dispatch depositcompleted	:	depositcompleted(_)
Dispatch depositfailed		:	depositfailed(REASON)

// Basicrobot
Dispatch cmd : cmd(MOVE)
Dispatch end       	: end(ARG)  
Request step : step(TIME)
Reply stepdone : stepdone(V)
Reply stepfail : stepfail(V)
Event alarm : alarm(X)
Event  sonar       : sonar( DISTANCE )
Dispatch obstacle  : obstacle( ARG ) 	//generated by distancefilter
Event   info       : info( ARG ) 	    //for external components, not coap-observed


// PathExecutor
Request	dopath		: dopath( PATH, OWNER )
Reply	dopathdone	: dopathdone( ARG )
Reply	dopathfail	: dopathfail( ARG )
Dispatch pathdone	: pathdone( P )
Dispatch pathfail	: pathdone( P )
Dispatch cmd		: cmd(MOVE)     
Request step		: step( TIME )	
Reply   stepdone	: stepdone(V)  
Reply   stepfail	: stepfail(DURATION, CAUSE)
Event	alarm		: alarm(X) 

// CONTEXES ===================================================================
Context ctx_smartdevice 		ip [host="localhost" port=11799]
Context ctx_wasteservice		ip [host="localhost" port=11800]
Context ctx_transporttrolley	ip [host="localhost" port=11801]
Context ctx_robot				ip [host="localhost" port=8020]

// ACTORS =====================================================================
ExternalQActor basicrobot context ctx_robot

QActor smartdevice_simulator context ctx_smartdevice {
	[#
		var Types: String = ""
		var TypesList = arrayListOf<wasteservice.WasteType>()
		
		var WasteType: wasteservice.WasteType = wasteservice.WasteType.PLASTIC
		var WasteWeight: Double = 10.0
	#]
	State state_init initial {
		println("[SmartDevice Simulator] Started")
		discardMsg Off
	}
	Goto state_typesrequest
	
	State state_typesrequest {
		delay 1000
		request typesprovider -m typesrequest : typesrequest(_)
		println("[SmartDevice Simulator] Sent typesrequest()")
	}
	Transition t1 whenReply	typesreply -> state_handle_types
	
	State state_handle_types {
		printCurrentMessage
		onMsg(typesreply : typesreply(TYPES)) {
			[#
				Types = payloadArg(0).toString()
				TypesList = wasteservice.Utils.getWasteTypesList(Types, "_")
			#]
		}
		println("[SmartDevice Simulator] Types list: $TypesList")
	}
	Goto state_storerequest
	
	State state_storerequest {
		[#
			WasteType = wasteservice.WasteType.values()[kotlin.random.Random.nextInt(0, TypesList.size)]
		#]
		delay 1000
		request wasteservice -m storerequest : storerequest($WasteType, $WasteWeight)
		println("[SmartDevice Simulator] Sent storerequest($WasteType, $WasteWeight)")
	}
	Transition t2	whenReply	loadaccepted -> state_handle_loadaccepted
					whenReply	loadrejected -> state_handle_loadrejected
	
	State state_handle_loadaccepted {
		println("[SmartDevice Simulator] Received LoadAccepted")
	}
	Goto state_storerequest
	
	State state_handle_loadrejected {
		println("[SmartDevice Simulator] Received LoadRejected")
	}
	Goto state_storerequest
}

// Actor that provides the types of waste that can be stored
// in the waste service area, when a Smart Device connects
QActor typesprovider context ctx_wasteservice {
	[#
		var WasteTypes: String = wasteservice.Utils.getWasteTypesString("_")
	#]
	State state_init initial {
		println("[TypesProvider] Started. WasteTypes: $WasteTypes")
		discardMsg Off
	}
	Goto state_idle
	
	State state_idle {
		println("[TypesProvider] Waiting for type requests...")
	}
	Transition t1	whenRequest typesrequest	-> state_handle_wastetypes_request
	
	State state_handle_wastetypes_request {
		printCurrentMessage
		replyTo typesrequest with typesreply	: typesreply($WasteTypes)
		println("[TypesProvider] Replied with types list: $WasteTypes")
	}
	Goto state_idle
}

QActor wasteservice context ctx_wasteservice {
	[#
		var RequestedWasteType: wasteservice.WasteType = wasteservice.WasteType.values()[0]
		var RequestedWasteWeight: Double = 1.0
		
		val WasteService = wasteservice.WasteService()
		var StorageStats: String = WasteService.getFullStatusString()
		
		var WaitingPickup: Boolean = false
		var WaitingDeposit: Boolean = false
	#]
	State state_init initial {
		println("[WasteService] Started.")
		println("[WasteService] Current storage:")
		println("$StorageStats")
		discardMsg Off
	}
	Goto state_idle
	
	State state_idle {
		println("[WasteService] Waiting for store requests...")
	}
	Transition t1	whenRequest storerequest	-> state_handle_storerequest

	State state_handle_storerequest {
		printCurrentMessage
		onMsg(storerequest : storerequest(TYPE, LOAD)) {
			[#
				var Type = payloadArg(0)
				var Load = payloadArg(1)
			#]
			println("[WasteService] Received storerequest($Type, $Load)")
			
			if [# wasteservice.Utils.isValidWasteType(Type) &&
					wasteservice.Utils.isValidWasteWeight(Load) #]
			{
				[#
					RequestedWasteType = wasteservice.WasteType.valueOf(Type)
					RequestedWasteWeight = payloadArg(1).toDouble()
				#]
				
				if [# WasteService.canPreStore(RequestedWasteType, RequestedWasteWeight) #]
				{
					// Update the pre-storage counter
					[#
						WasteService.addToPreStorage(RequestedWasteType, RequestedWasteWeight)
						StorageStats = WasteService.getFullStatusString()
					
						WaitingPickup = true
					#]
					println("[WasteService] There is enough space.")
					request transporttrolley -m deposit : deposit( $RequestedWasteType )
					//request transporttrolley -m deposit : deposit( $RequestedWasteType )
				}
				else
				{
					[# WaitingPickup = false #]
					println("[WasteService] Load rejected: there is not enough space in the container to store the load.")
					replyTo storerequest with loadrejected: loadrejected(_)
				}
			}
			else
			{
				[# WaitingPickup = false #]
				println("[WasteService] Load rejected: one or more parameters are invalid.")
				replyTo storerequest with loadrejected: loadrejected(_)
			}
			
			println("[WasteService] Current storage:")
			println("$StorageStats")
		}
	}
	Goto state_idle if [# WaitingPickup == false #] else state_waiting_pickup
	
	State state_waiting_pickup {
		println("[WasteService] Waiting for pickup completion...")
	}
	Transition t1 whenReply pickupcompleted	-> state_pickup_completed
	
	State state_pickup_completed {
		[#
			WaitingPickup = false
			WaitingDeposit = true
		#]
		println("[WasteService] Pickup completed, sent Load accepted.")
		replyTo storerequest with loadaccepted: loadaccepted(_)
	}
	Goto state_waiting_deposit
	
	State state_waiting_deposit {
		println("[WasteService] Waiting for deposit completion...")
	}
	Transition t1	whenMsg depositcompleted	-> state_deposit_completed
					whenMsg depositfailed		-> state_deposit_failed
	
	State state_deposit_completed {
		// Update the actual storage counter
		[#
			WasteService.addToStorage(RequestedWasteType, RequestedWasteWeight)
			StorageStats = WasteService.getFullStatusString()
			
			WaitingDeposit = false
		#]
		println("[WasteService] Deposit completed. Current storage:")
		println("$StorageStats")
	}
	Goto state_idle
	
	State state_deposit_failed {
		onMsg(depositfailed : depositfailed(REASON)) {
			// Reset the pre storage counter
			[#
				// Reset PreStorage
				
				WaitingDeposit = false
				var Error = payloadArg(0)
			#]
			println("[WasteService] Deposit failed: $Error.")
		}
		println("[WasteService] Current storage:")
		println("$StorageStats")
	}
	Goto state_idle
}

QActor transporttrolley context ctx_transporttrolley {
	[# 
		var Actions: String = "" 
		var Progress = ""
		
		var WasteType: wasteservice.WasteType = wasteservice.WasteType.PLASTIC
	#]
	State state_init initial {
		[#
			plannerBCR.initAI()
			plannerBCR.loadRoomMap("mapRoomEmpty")
			plannerBCR.showMap()
			wasteservice.MapConfigUtils.loadMapConfig("mapConfigWasteService")
			println("MapConfig:")
			wasteservice.MapConfigUtils.showFancyMap()
		#]
		println("[TransportTrolley] Started.")
	}
	Goto state_idle
	
	State state_idle {
		println("[TransportTrolley] Waiting for deposit requests...")
	}
	Transition t1	whenRequest deposit		-> state_handle_deposit_request
	
	State state_handle_deposit_request {
		printCurrentMessage
		onMsg(deposit: deposit(TYPE)) {
			[# WasteType = wasteservice.WasteType.valueOf(payloadArg(0)) #]
			println("[TransportTrolley] Deposit request received.")
		}
	}
	Goto state_move_to_indoor
	
	State state_move_to_indoor {
		println("[TransportTrolley] Moving to INDOOR...")
		[#
			val curPos: Pair<Int, Int> = plannerBCR.get_curPos()
			val goal: Pair<Int, Int> = wasteservice.MapConfigUtils.getNearestPositionToCellType(curPos, "INDOOR")
			plannerBCR.setGoal(goal.first, goal.second)
			plannerBCR.doPlan()
			Actions = plannerBCR.getActionsString()
		#]
		request pathexecutor -m dopath : dopath($Actions, transporttrolley)
	}
	Transition t1 whenReply dopathdone -> state_pickup
				  whenReply dopathfail -> state_error
	
	State state_pickup {
		println("[TransportTrolley] Picking up the load of $WasteType...")
		delay 3000
		println("[TransportTrolley] Pickup completed.")
		
		replyTo deposit with pickupcompleted: pickupcompleted(_)
	}
	Goto state_move_to_box
	//Goto state_move_to_glassbox if [# WasteType == wasteservice.WasteType.GLASS #] else state_move_to_plasticbox
	
	State state_move_to_box {
		println("[TransportTrolley] Moving to ${WasteType.name}_BOX...")
		[#
			val curPos: Pair<Int, Int> = plannerBCR.get_curPos()
			val goal: Pair<Int, Int> = wasteservice.MapConfigUtils.getNearestPositionToCellType(curPos, WasteType.name)
			plannerBCR.setGoal(goal.first, goal.second)
			plannerBCR.doPlan()
			Actions = plannerBCR.getActionsString()
		#]
		request pathexecutor -m dopath : dopath($Actions, transporttrolley)
	}
	Transition t1 whenReply dopathdone -> state_dump
				  whenReply dopathfail -> state_error
	
	State state_dump {
		println("[TransportTrolley] Dumping the load...")
		delay 3000
		println("[TransportTrolley] Dump completed.")
		
		forward wasteservice -m depositcompleted : depositcompleted(_)
	}
	Goto state_move_to_home
	
	State state_move_to_home {
		println("[TransportTrolley] Moving to HOME...")
		[#
			val curPos: Pair<Int, Int> = plannerBCR.get_curPos()
			val goal: Pair<Int, Int> = wasteservice.MapConfigUtils.getNearestPositionToCellType(curPos, "HOME")
			plannerBCR.setGoal(goal.first, goal.second)
			plannerBCR.doPlan()
			Actions = plannerBCR.getActionsString()
		#]
		request pathexecutor -m dopath : dopath($Actions, transporttrolley)
	}
	Transition t1 whenReply dopathdone -> state_idle
				  whenReply dopathfail -> state_error
	
	State state_error {
		onMsg(dopathfail: dopathfail(PATH_STILL_TO_DO)) {
			[#
				var PathStillToDo = payloadArg(0)
			#]
			println("[TransportTrolley] An Error occurred while trying to move along a path.")
			println("[TransportTrolley] Path still to do: $PathStillToDo")
			
			// TO-DO: Return to HOME
		}
	}
	Goto state_idle
}

QActor pathexecutor context ctx_transporttrolley {
	[# 
		var CurMoveTodo = ""
		var MovesDone = "" 
	#]
	
	State init initial {
		[# CurMoveTodo = "" #]
		[# sysUtil.logMsgs=true #]
		println("[PathExecutor] started")
	}
	Transition t0 whenRequest dopath -> doThePath
	
	State doThePath {
		printCurrentMessage
		onMsg(dopath : dopath(P, C)) {
			[# val path = payloadArg(0); println(path) #]
			[# pathut.setPath(path) #]
		}
		
		println("[PathExecutor] pathTodo: ${pathut.getPathTodo()}")
	}
	Goto nextMove
	
	State nextMove {
		[# CurMoveTodo = pathut.nextMove() #]
		[# MovesDone += CurMoveTodo #]
		println("[PathExecutor] curMoveTodo: $CurMoveTodo")
	}
	Goto endWorkOk if [# CurMoveTodo.length == 0 #] else doMove
	
	State doMove {
		[#
			plannerBCR.updateMap(CurMoveTodo, "")
			// plannerBCR.showMap()
			// plannerBCR.showCurrentRobotState()	
		#]
		delay 350
	}
	Goto doMoveW if [# CurMoveTodo == "w" #] else doMoveTurn
	
	State doMoveTurn {
		forward basicrobot -m cmd : cmd($CurMoveTodo)
	}
	Transition t1 whenTime 350 -> nextMove
			
	State doMoveW {
		request basicrobot -m step : step(350)
	}
	Transition t2 whenEvent alarm -> handleAlarm
				  whenReply stepdone -> nextMove
				  whenReply stepfail -> endWorkKo
				  
	State handleAlarm {
		[# var PathTodo = pathut.getPathTodo() #]
		println("[PathExecutor] handleAlarm ... pathTodo: $PathTodo")
	}
	
	State endWorkOk {
		println("[PathExecutor] Path done - bye")
		replyTo dopath with dopathdone : dopathdone( ok )
	}
	Goto init
	
	State endWorkKo {
		[# var PathStillTodo = pathut.getPathTodo() #]
		println("[PathExecutor] path failure - sorry. PathStillTodo: $PathStillTodo")
		replyTo dopath with dopathfail : dopathfail( $PathStillTodo )
	}
	Transition t0 whenEvent alarm -> handleAlarm
}

/*QActor basicrobot context ctx_robot {
[#
  var StepTime      = 0L
  var StartTime     = 0L     
  var Duration      = 0L  
  var RobotType     = "" 
  var CurrentMove   = "unkknown"
#]  
 	State s0 initial { 	      
 		discardMsg Off  //WE want receive any msg
 		//[# unibo.comm22.utils.CommSystemConfig.tracing = false #]  //tracing at unibo.comm22 level
		println("basicrobot | START")	
 		qrun unibo.robot.robotSupport.create(myself,"basicrobotConfig.json")	
 		[# RobotType = unibo.robot.robotSupport.robotKind #]
 		delay 1000  //give to the realsonar the time to start
        if[# RobotType != "virtual" #]{
        	[# var robotsonar = context!!.hasActor("realsonar")  
        	   if(robotsonar != null) unibo.robot.robotSupport.createSonarPipe(robotsonar) 
        	#] 
  		}//The Virtual robot sonar is created in virtualrobotSupport2021
 
  		//run unibo.robot.robotSupport.move( "a" )    //synch
 		//run unibo.robot.robotSupport.move( "d" )	//synch
    		//run unibo.robot.robotSupport.move( "w" )    //asynch
 		updateResource [# "basicrobot(start)" #]
 	} 
	Goto work
	
	State work{ 
		println("basicrobot  | waiting .................. ")  
	} 
	Transition t1   whenMsg     cmd       -> execcmd
					whenRequest step      -> doStep			 
					whenMsg    obstacle   -> handleObstacle  //in virtualrobot caused by the move w/s
					//whenEvent sonar       -> handleSonar
				  	whenMsg     end       -> endwork			  
	
	State execcmd{
		printCurrentMessage
		onMsg( cmd : cmd(MOVE) ){
  			//activate the motors  
  			[# CurrentMove = payloadArg(0) #]
			run unibo.robot.robotSupport.move( payloadArg(0 ) )
			updateResource [# "moveactivated(${payloadArg(0)})" #]
		}
	 }
	 Goto work   
	 
	State handleObstacle{
		//println("basicrobotttttttttt | handleObstacle ${CurrentMove}")	
		//run unibo.robot.robotSupport.move( "h" ) //non importa 
		//printCurrentMessage
		updateResource [# "obstacle(${CurrentMove})" #]
		//JUNE22: behavior embedded in VirtualrobotSupport2021
		 
		//if[# CurrentMove == "w" #]{
		//back to avoid emission of obstacle again if real robot moving forward !!!
		//if[# RobotType != "virtual" #]{	
		//	run unibo.robot.robotSupport.move( "s" )
		//	delay 100 
		//	run unibo.robot.robotSupport.move( "h" ) 
 		//}
 		//emit info : info( obstacledoing(w) )
	}
	Goto work  
 
	State handleSonar{
		printCurrentMessage
	}
	Goto work
		
   	State doStep{ 
 		printCurrentMessage  
		onMsg( step : step( T ) ){  
			[#	StepTime = payloadArg(0).toLong() 	#]  
			updateResource [# "step(${StepTime})" #]
  		}  
        memoCurrentTime StartTime  
        println("basicrobot | doStep StepTime =$StepTime  ")        
        run unibo.robot.robotSupport.move( "w" )  //moves a real robot forever !!!
	}  
	Transition t0
		whenTimeVar StepTime  -> stepDone  	 
 		whenMsg  obstacle     -> stepFail		
    	 
	
	State stepDone{   
 		run unibo.robot.robotSupport.move( "h" )  //stop the real robot already done ???
		updateResource [# "stepDone($StepTime)" #]
   		//emit info : info( stepdone($StepTime) )
   		replyTo step with stepdone : stepdone(ok)
		println("basicrobot | stepDone reply done")
  	}
	Goto work  

	State stepFail{  	 	
		setDuration Duration from StartTime
		run unibo.robot.robotSupport.move( "h" )  //stop the (real) robot
		//[# var TunedDuration =  Duration * 5 / 6 #]
		//[# var TunedDuration   = kotlin.math.round( (StepTime - Duration) * 15 / 100 ) #]
		[# var TunedDuration   =  ((StepTime - Duration) * 15 / 100).toLong()   #]
		println("basicrobot | stepFail duration=$Duration TunedDuration=$TunedDuration")
			run unibo.robot.robotSupport.move( "s" )
			delayVar TunedDuration 
			run unibo.robot.robotSupport.move( "h" ) 
 		updateResource [# "stepFail($Duration)" #] 
 		//emit info : info( stepFail($Duration) )
 		replyTo step with stepfail : stepfail($Duration, obst)
    }
	Goto work
	
	State endwork{ 
		updateResource [# "basicrobot(end)" #]	 		
 		terminate 1
	}
}*/