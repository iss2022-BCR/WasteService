/* Generated by AN DISI Unibo */ 
package it.unibo.envsonarhandler

import it.unibo.kactor.ActorBasicFsm
import it.unibo.kactor.Transition
import kotlinx.coroutines.CoroutineScope

class Envsonarhandler ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("envsonarhandler | (RE)START")
					}
					 transition(edgeName="t16",targetState="dontcare",cond=whenDispatch("cmd"))
					transition(edgeName="t17",targetState="handleEnvSonar",cond=whenEvent("sonar"))
				}	 
				state("dontcare") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("handleEnvSonar") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t18",targetState="handleEnvSonar",cond=whenEvent("sonar"))
				}	 
			}
		}
}
