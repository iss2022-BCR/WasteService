// PROJECT
System sprint2_wasteservice_rpi

// MESSAGES AND EVENTS ========================================================
// SmartDevice (truck) -> TypesProvider
Request typesrequest:	typesrequest(_)
// TypesProvider -> SmartDevice
Reply typesreply:		typesreply(TYPES)

// SmartDevice (truck) -> WasteService
Request storerequest:	storerequest(TYPE, LOAD)
// WasteService -> SmartDevice
Reply loadaccepted:		loadaccepted(_)
Reply loadrejected:		loadrejected(_)

// WasteService -> TransportTrolley
Request deposit:			deposit(TYPE, LOAD)
// TransportTrolley -> WasteService
Reply pickupcompleted:		pickupcompleted(_)
// TransportTrolley -> WasteService
Dispatch depositcompleted:	depositcompleted(_)
Dispatch depositfailed:		depositfailed(REASON)

// TransportTrolley -> PathExecutorBCR
Request	dopath:		dopath(PATH, OWNER)
// PathExecutorBCR -> TransportTrolley
Reply dopathdone:	dopathdone(ARG)
Reply dopathfail:	dopathfail(ARG)

// Basicrobot
Dispatch cmd:		cmd(MOVE)
Dispatch end:		end(ARG)  
Request step:		step(TIME)
Reply stepdone:		stepdone(V)
Reply stepfail:		stepfail(V)
Event alarm:		alarm(X)
Event sonar:		sonar(DISTANCE)
Dispatch obstacle:	obstacle(ARG) 	//generated by distancefilter
Event info:			info(ARG) 	    //for external components, not coap-observed

// Sprint2
// Sonar -> AlarmController
Dispatch sonar_data:	distance(DISTANCE)
Dispatch sonaractivate: sonaractivate(_)
Dispatch sonardeactivate: sonardeactivate(_)

// AlarmController -> PathExecutorBCR
Event stop:		stop(_)
// AlarmController -> PathExecutorBCR
Event resume:	resume(_)

// -> TrolleyStateProvider
Dispatch update_trolley_state:	update_trolley_state(STATE)
// TrolleyStateProvider -> LedController
Event trolley_state_changed:	trolley_state_changed(STATE)

// COAP
Dispatch coapUpdate: coapUpdate(RESOURCE, VALUE)

Dispatch setup: setup(_)

// CONTEXES ===================================================================
Context ctx_wasteservice		ip [host="192.168.1.4" port=11800]
Context ctx_transporttrolley	ip [host="192.168.1.4" port=11801]
Context ctx_robot				ip [host="192.168.1.4" port=8020]

Context ctx_raspberrypi			ip [host="localhost" port=11802]

// ACTORS =====================================================================
// CTX WasteService -----------------------------------------------------------
ExternalQActor typesprovider		context ctx_wasteservice
ExternalQActor wasteservice			context ctx_wasteservice

// CTX TransportTrolley -------------------------------------------------------
ExternalQActor transporttrolley		context ctx_transporttrolley
ExternalQActor trolleystateprovider	context ctx_transporttrolley
ExternalQActor pathexecutorbcr		context ctx_transporttrolley

// CTX Robot ------------------------------------------------------------------
ExternalQActor basicrobot			context ctx_robot

// CTX RaspberryPi ------------------------------------------------------------
// Sonar filters
CodedQActor filter_distancechanged	context ctx_raspberrypi className "wasteservice.raspberry.sonar.filterDistanceChanged"
CodedQActor filter_distancebounds	context ctx_raspberrypi className "wasteservice.raspberry.sonar.filterDistanceBounds"
CodedQActor filter_alarm			context ctx_raspberrypi className "wasteservice.raspberry.sonar.filterAlarm"

// SONAR
CodedQActor sonarinput context ctx_raspberrypi className "wasteservice.raspberry.sonar.sonarSupportBCR"
QActor sonar_bcr context ctx_raspberrypi {
	State state_init initial {
		println("[SonarBCR] Started.")
		run wasteservice.raspberry.sonar.sonarBuilder.createSonar()
	}
	Goto state_activate
	
	State state_activate {
		forward sonarinput -m sonaractivate : sonaractivate(_)
		println("[SonarBCR] Sent activation message.")
		delay 10000
	}
	//Goto state_deactivate
	
	State state_deactivate {
		forward sonarinput -m sonardeactivate : sonardeactivate(_)
		println("[SonarBCR] Sent deactivation message.")
		delay 5000
	}
	Goto state_activate
}


// LED
QActor led_bcr context ctx_raspberrypi {
	State state_init initial {
		println("[LedBCR] Started.")
		run wasteservice.raspberry.led.ledSupportBCR.createLed()
	}
	Goto state_idle
	
	State state_idle {
		//println("[LedBCR] Idle.")
	}
	Transition t0	whenEvent trolley_state_changed -> state_handle
	
	State state_handle {
		onMsg(trolley_state_changed: trolley_state_changed(STATE)) {
			[# 
				val TTState = wasteservice.TransportTrolleyState.parseFromMessage(payloadArg(0))
				wasteservice.raspberry.led.ledSupportBCR.doLed(TTState)
			#]
			
			// test
			println("[LedBCR] State: $TTState")
		}
	}
	Goto state_idle
}