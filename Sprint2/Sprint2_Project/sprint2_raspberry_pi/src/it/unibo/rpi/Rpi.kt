/* Generated by AN DISI Unibo */ 
package it.unibo.rpi

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Rpi ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						println("[RPi] Waiting to send a forward message...")
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_forward", cond=doswitch() )
				}	 
				state("state_forward") { //this:State
					action { //it:State
						forward("forwardMessage", "forwardMessage(_)" ,"pc" ) 
						println("	[RPi] Sent a FORWARD message")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="state_received_ack1",cond=whenDispatch("ack"))
				}	 
				state("state_received_ack1") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("[RPi] Received ACK")
						delay(2000) 
						println("[RPi] Waiting to send an event message...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_event", cond=doswitch() )
				}	 
				state("state_event") { //this:State
					action { //it:State
						emit("eventMessage", "eventMessage(_)" ) 
						println("	[RPi] Emitted an EVENT message")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="state_received_ack2",cond=whenDispatch("ack"))
				}	 
				state("state_received_ack2") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("[RPi] Received ACK")
						delay(10000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_init", cond=doswitch() )
				}	 
			}
		}
}
