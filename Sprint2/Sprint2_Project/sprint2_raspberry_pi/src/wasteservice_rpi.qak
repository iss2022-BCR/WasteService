// PROJECT
System sprint2_raspberry_pi

// MESSAGES AND EVENTS ========================================================
// SmartDevice (truck) -> TypesProvider
Request typesrequest:	typesrequest(_)
// TypesProvider -> SmartDevice
Reply typesreply:		typesreply(TYPES)

// SmartDevice (truck) -> WasteService
Request storerequest:	storerequest(TYPE, LOAD)
// WasteService -> SmartDevice
Reply loadaccepted:		loadaccepted(_)
Reply loadrejected:		loadrejected(_)

// WasteService -> TransportTrolley
Request deposit:			deposit(TYPE, LOAD)
// TransportTrolley -> WasteService
Reply pickupcompleted:		pickupcompleted(_)
// TransportTrolley -> WasteService
Dispatch depositcompleted:	depositcompleted(_)
Dispatch depositfailed:		depositfailed(REASON)

// TransportTrolley -> PathExecutorBCR
Request	dopath:		dopath(PATH, OWNER)
// PathExecutorBCR -> TransportTrolley
Reply dopathdone:	dopathdone(ARG)
Reply dopathfail:	dopathfail(ARG)

// Basicrobot
Dispatch cmd:		cmd(MOVE)
Dispatch end:		end(ARG)  
Request step:		step(TIME)
Reply stepdone:		stepdone(V)
Reply stepfail:		stepfail(V)
Event alarm:		alarm(X)
Event sonar:		sonar(DISTANCE)
Dispatch obstacle:	obstacle(ARG) 	//generated by distancefilter
Event info:			info(ARG) 	    //for external components, not coap-observed

// Sprint2
// Sonar -> AlarmController
Dispatch sonar_data:	distance(DISTANCE)
Dispatch sonaractivate: sonaractivate(_)
Dispatch sonardeactivate: sonardeactivate(_)

// AlarmController -> PathExecutorBCR
Event stop:		stop(_)
// AlarmController -> PathExecutorBCR
Event resume:	resume(_)

// -> TrolleyStateProvider
Dispatch update_trolley_state:	update_trolley_state(STATE)
// TrolleyStateProvider -> LedController
Event trolley_state_changed:	trolley_state_changed(STATE)

// COAP
Dispatch coapUpdate : coapUpdate(RESOURCE, VALUE)

// CONTEXES ===================================================================
/*Context ctx_wasteservice		ip [host="localhost" port=11800]
Context ctx_transporttrolley	ip [host="localhost" port=11801]
Context ctx_robot				ip [host="localhost" port=8020]*/
/*Context ctx_wasteservice		ip [host="192.168.1.4" port=11800]
Context ctx_transporttrolley	ip [host="192.168.1.4" port=11801]
Context ctx_robot				ip [host="192.168.1.4" port=8020]*/

Context ctx_raspberrypi			ip [host="localhost" port=11802]

// ACTORS =====================================================================
// CTX WasteService -----------------------------------------------------------
/*ExternalQActor typesprovider context ctx_wasteservice
ExternalQActor wasteservice context ctx_wasteservice

// CTX TransportTrolley -------------------------------------------------------
ExternalQActor transporttrolley context ctx_transporttrolley
ExternalQActor trolleystateprovider context ctx_transporttrolley
ExternalQActor pathexecutorbcr context ctx_transporttrolley

// CTX Robot ------------------------------------------------------------------
ExternalQActor basicrobot context ctx_robot

// CTX RaspberryPi ------------------------------------------------------------
QActor alarmcontroller context ctx_raspberrypi {
	[#
		var SonarDistance: Double = Double.MAX_VALUE
		var PrevAlarm: Boolean = false
		var Alarm: Boolean = false
	#]
	State state_init initial {
		println("[AlarmController] Started.")
	}
	Goto state_idle
	
	State state_idle {
		println("[AlarmController] Listening for sonar data...")
		println("[AlarmController] Current alarm state: $Alarm")
		[# PrevAlarm = Alarm #]
	}
	Transition t0 whenMsg sonar_data -> state_handle_sonar_data
	
	State state_handle_sonar_data {
		printCurrentMessage
		
		onMsg(sonar_data: sonar_data(DISTANCE)) {
			[# Alarm = wasteservice.Utils.isAlarm(payloadArg(0)) #]
	    	println("[AlarmController] Received sonar data: ${payloadArg(0)}")
	    	
	    	// Check if state changed
	    	if [# Alarm != PrevAlarm #] {
	    		if [# Alarm == true #] {
	    			println("[AlarmController] Alarm situation!")
	    	
	    			emit stop: stop(_)
	    		} else {
	    			println("[AlarmController] Alarm over.")
	    			
	    			emit resume: resume(_)
	    		}
	    	}
	    }
	}
	Goto state_idle
}
QActor ledcontroller context ctx_raspberrypi {
	[# var State: wasteservice.LedState = wasteservice.LedState.OFF #]
	State state_init initial {
		println("[LedController] Started.")
	}
	Goto state_idle
	
	State state_idle {
		println("[LedController] Led state: ${State.name}")
	}
	Transition t0	whenEvent trolley_state_changed -> state_handle
	
	State state_handle {
		onMsg(trolley_state_changed: trolley_state_changed(STATE)) {
			[# var NewState = wasteservice.Utils.getLedStateFromTrolleyState(payloadArg(0)) #]
			if [# NewState != State #] {
				println("[LedController] Led state changed!")
				[# State = NewState #]
			}
		}
	}
	Goto state_idle
}*/

// Sonar data source providers
CodedQActor sonardatasource_concrete	context ctx_raspberrypi className "wasteservice.raspberry.sonar.sonarDataSourceHCSR04"
CodedQActor sonardatasource_mock		context ctx_raspberrypi className "wasteservice.raspberry.sonar.sonarDataSourceMock"

// Sonar filters
CodedQActor filterdistancechanged	context ctx_raspberrypi className "wasteservice.raspberry.sonar.filterDistanceChanged"
CodedQActor filterdistancebounds	context ctx_raspberrypi className "wasteservice.raspberry.sonar.filterDistanceBounds"
CodedQActor filteralarm				context ctx_raspberrypi className "wasteservice.raspberry.sonar.filterAlarm"

QActor sonar_bcr context ctx_raspberrypi {
	State state_init initial {
		println("[SonarBCR] Started.")
		run wasteservice.raspberry.sonar.sonarBuilder.createSonar()
	}
	Goto state_activate
	
	State state_activate {
		forward sonardatasource_concrete -m sonaractivate : sonaractivate(_)
		println("[SonarBCR] Sent activation message.")
		delay 10000
	}
	Goto state_deactivate
	
	State state_deactivate {
		forward sonardatasource_concrete -m sonardeactivate : sonardeactivate(_)
		println("[SonarBCR] Sent deactivation message.")
	}
}

QActor testalarmreceiver context ctx_raspberrypi {
	State state_init initial {
		println("[TestAlarmReceiver] Started.")
	}
	Goto state_idle
	
	State state_idle {
		println("[TestAlarmReceiver] Idle.")
	}
	Transition t0 whenEvent stop -> state_handle
	
	State state_handle {
		onMsg(stop: stop(_)) {
			println("[TestAlarmReceiver] Received stop.")
		}
		onMsg(resume: resume(_)) {
			println("[TestAlarmReceiver] Received resume.")
		}
	}
	Goto state_idle
}

// LED