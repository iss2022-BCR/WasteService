// TEST
System sprint2_raspberry_pi

// ===================

Dispatch sonar_data:	distance(DISTANCE)
Dispatch sonaractivate: sonaractivate(_)
Dispatch sonardeactivate: sonardeactivate(_)

// AlarmController -> PathExecutorBCR
Event stop:		stop(_)
// AlarmController -> PathExecutorBCR
Event resume:	resume(_)

// ===================

Context ctx_raspberrypi			ip [host="localhost" port=11802]

// ===================

CodedQActor sonardatasource context ctx_raspberrypi className "wasteservice.raspberry.radarSystem.sonarDataSource" 


CodedQActor filter_distancechanged	context ctx_raspberrypi className "wasteservice.raspberry.sonar.filterDistanceChanged"
CodedQActor filter_distancebounds	context ctx_raspberrypi className "wasteservice.raspberry.sonar.filterDistanceBounds"
CodedQActor filter_alarm			context ctx_raspberrypi className "wasteservice.raspberry.sonar.filterAlarm"
CodedQActor filter_display			context ctx_raspberrypi className "wasteservice.raspberry.display.filterDisplay"

QActor sonar_bcr context ctx_raspberrypi {
	State state_init initial {
		println("[SonarBCR] Started.")
		run wasteservice.raspberry.radarSystem.radarSystemBuilder.createSonar()
	}
	Goto state_activate
	
	State state_activate {
		forward sonardatasource -m sonaractivate : sonaractivate(_)
		println("[SonarBCR] Sent activation message.")
		delay 10000
	}
	//Goto state_deactivate
	
	State state_deactivate {
		forward sonardatasource -m sonardeactivate : sonardeactivate(_)
		println("[SonarBCR] Sent deactivation message.")
		delay 5000
	}
	Goto state_activate
}

QActor testalarmreceiver context ctx_raspberrypi {
	State state_init initial {
		println("[TestAlarmReceiver] Started.")
	}
	Goto state_idle
	
	State state_idle {
		println("[TestAlarmReceiver] Idle.")
	}
	Transition t0	whenEvent stop -> state_handle_resume
					whenEvent resume -> state_handle_stop
	
	State state_handle_stop {
		printCurrentMessage
		println("[TestAlarmReceiver] Received stop.")
	}
	Goto state_idle
	
	State state_handle_resume {
		printCurrentMessage
		println("[TestAlarmReceiver] Received resume.")
	}
	Goto state_idle
	
	State state_handle {
		printCurrentMessage
		onMsg(stop: stop) {
			println("[TestAlarmReceiver] Received stop.")
		}
		onMsg(resume: resume) {
			println("[TestAlarmReceiver] Received resume.")
		}
	}
	Goto state_idle
}