/* Generated by AN DISI Unibo */ 
package it.unibo.sonar_mock_test

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar_mock_test ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						println("[SonarMockTest] Started.")
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_detect", cond=doswitch() )
				}	 
				state("state_detect") { //this:State
					action { //it:State
						println("[SonarMockTest] Sending distance ")
						forward("sonar_data", "sonar_data(500)" ,"alarm_controller" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		//sysaction { //it:State
				 	 		  stateTimer = TimerActor("timer_state_detect", 
				 	 			scope, context!!, "local_tout_sonar_mock_test_state_detect", 5000.toLong() )
				 	 		//}
					}	 	 
					 transition(edgeName="t025",targetState="state_detect",cond=whenTimeout("local_tout_sonar_mock_test_state_detect"))   
				}	 
			}
		}
}
