SCRUM Goal e Work Plan


Coerenza di flusso: parte del software disponibile se lo scriviamo lo scriviamo dopo la parte di analisi, per coerenza logica.

Il problema è il problema: lasciamo stare la tecnologia. Quando analizzo il problema, guardo il problema. Obbiettivo di trovare le tecnologie giuste in funzione di analisi dei requisiti


prima cosa del problema: analizzare i requisiti per capire i requisiti. 

Dizionario <- utile. Significa che chi analizza i requisiti, trova un termine (che compare nei requisiti, oppure se lo abbiamo aggiunto noi dovremmo scriverlo che lo abbiamo inserito) e sa cosa significa, cosa si intende ecc. Perché ne specifichiamo il significato

esempio: formalizzazione di un termine: introduco una variabile, di tipo float,  per indicare il truck load


Quando scriviamo analisi, siamo persone che analizzano un testo, non INGEGNERI DEI SISTEMI DEL SOFTWARE. Non va bene scrivere ad esempio cos'è loadAccept in linguaggio tecnico (risposta positiva alla richiesta. Dovrei

le prime parole di queste azioni, quando analizzo il testo sono:
1. request;
2. answer loadaccept;
3. answer loadrejected;

Come per gli altri termini che compaiono, ad esempio WasteTruck, dobbiamo definire cosa sono! Per WasteTruck è 

In requirement analysis NON scriviamo ad esempio che "WasteTruck è un QActor", caBBo cosa ne sappiamo a inizio del corso?


inizio a pensare di formalizzare le cose che sono legate ai servizi: richiesta e answer, dicendo che in Java non c'è nulla che corrisponda come elemento del linguaggio, a queste cose (a meno che non utilizzo librerie o framework esterni)!!! Quindi, devo avvalermi di qualcosa che mi permetta di esprimere questo concetto

Abstraction gap: un concetto che con la tecnologia che sto usando per formalizzare la mia roba non ho, posso fare due cose:
1) vado a vedere se c'è qualcosa in Java;
2) cerco un linguaggio che permetta di esprimere questi concetti interamente 


1) c'è un abstraction gap (devo esprimere formalmente request e response);
2) cerco in rete se c'è un linguaggio che comprenda ste cose.

Requisito: linguaggio per definire questi concetti.

Però, non guardo subito in rete!!! Prima, ovviamente, guardo se nella mia software house c'è qualcosa che posso usare!

C'è QAK!!! Ma c'è solo quello? O c'è anche altro?


Il prof vorrebbe collegare questa parte di documentazione, a ciò che abbiamo fatto durante il corso


cose che posso utilizzare?
- proxy
- abilitatori di connessione?
- pattern observable?

Cosa posso fare quindi? Mi serve qualcosa per request/reponse/answer.

Cerco nella doc del corso (strumento ricerca degli HTML), la parola "request" o "answer"!!!

Utile: terminologia di riferimento in CostruireSoftware


QAK va bene, però potremmo scrivere che lo usiamo arrivandoci a ragionamento! Ad esempio mostriamo le possibilità: ad esempio ci sono dei JAR che la nostra software house ha, che ci permettono di fare quello che ci serve (mandiamo messaggi astraendo dal protocollo). 
Tuttavia, il modello QAK può offrire qualcosa in più, oppure ciò che differenzia QAK da una libreria: QAK è un metamodello, eseguibile, mentre il JAR è una libreria in un linguaggio

la parola è "linguaggio"

Il linguaggio di quella libreria è Java, in Java non c'è request/response

ma qualcuno ha scritto delle API per 


Perché continuano a uscire Linguaggi e non librerie? 


un linguaggio è general purpose se è turing completo, quindi può esprimere qualsiasi tipo di computazione.

Se nel linguaggio QAK non ci fosse la possibilità di specificare ed eseguire blocchi kotlin, non sarebbe general purpose/turing completo

QAK non nasce come general purpose language, ma per definire modelli che comprendono entità computazionali attive (a differenza degli oggetti) che comunicano a scambio di messaggi o tramite eventi.
QAK permette di distinguere tra diversi tipi di messaggi


il sistema è distribuito, quindi se il sistema è distribuito, questa distribuzione il prof vorrebbe vederla già nell'analisi dei requisiti!
Dobbiamo già considerare che il sistema sarà distribuito!

Scrivere un documentino che spiega cos'è QAK, se lo scegliamo


Noi non dobbiamo pensare che questo è un esercizio di programmazione in QAK! È un esercizio di analisi, perché QAK potrebbe permette di esprimere certe cose ma non altre, e nella fase in cui bisogna definire dei modelli, come in questo caso, un linguaggio di meta modellazione potrebbe avere dei vantaggi rispetto a Java.


obbiettivo dell'analisi dei requisiti: formalizzare i requisiti

ad esempio truckload come double o float, è una formalizzazione! Sono formalizzazioni diverse, ma vanno bene entrambe, perché formalizzano il concetto giusto per il requisito.


far vedere un'immagine dell'architettura, con i vari nodi previsti, leggendo l'analisi, senza specificare cosa sono i vari elementi(?)





Sprint0: 

Sprint1: primo sprint che facciamo per passare dalla view di analisi


Lo scrum goal te lo fissi ogni volta dopo che ti sei prefissato un obbiettivo.

Primo obbiettivo di ogni attività è capire il requisito.

Non si può partire nemmeno con lo sprint1 senza aver capito cosa ci viene chiesto (ovvero aver capito i requisiti)


Poi si propone un piano di lavoro.

Finito uno sprint si rifà il punto della situazione e si passa allo sprint dopo.


-----
l'analisi del problema deve terminare con un modello dell'architettura logica

Non è l'architettura della soluzione! Ma è l'architettura che l'analista introduce.

Se l'analisi dei requisiti introduce un'architettura, l'analisi del problema inizia con quella e può modificarla per specializzarla, correggerla, sistemarla ecc.



in analisi del problema si parte con architettura logica iniziale, e si finisce con architettura logica finale

Però il prof si aspetta alla fine dell'analisi del problema, dei link in cui: c'è un qak, ed un test plan in cui si fa vedere il funzionamento, con delle assert


Il prof preferisce avere una sintesi 




vedere immagine:
il transport trolley potrebbe stare benissimo nel contesto del server;

mentre il DDR è quello che ci viene fornito, quindi dovrebbe avere un contesto suo





Quando si generalizza il problema, lui vuole vedere delle tabelle/griglie


----------
arrivare ad ogni sprint con un'architettura di analisi

finire con architetture che ci permettono di pianificare il lavoro, ovvero dire il prossimo sprint sarà questo ecc. poi affrontiamo sprint e facciamo prototipo elo mostriamo al committente.

analisi la possiamo fare guardando i requisiti, sono 1, 2, 3, 4 iniziamo con 1, 2


fase di analisi serve per dare anche una sequenza a questo processo, ad esempio anche per dire se ci sono problemi insormontabili e proporre una soluzione o un workaround.



esempio in docs palazzoli, scrive "il committente ci fornisce il componente LED", ma non scrive se lo usano o no, o i motivi per cui ne formalizzano uno

=========================================
DOC PROGETTO:

Requisiti:
Ci va il copia e incolla o un link (o entrambi). Le considerazioni nostre NON VANNO QUI.

Analisi dei Requisiti
- Dizionario

Per ogni termine saliente che compare, definiamo cosa significa!!!



potremmo scrivere che la GUI la lasciamo alla fine










ci risentiamo con sistematicità verso fine agosto, ma possiamo mandargli delle mail durante agosto.

ad esempio a fine analisi del problema possiamo mandargli ciò che abbiamo fatto



----
Obbiettivo: formalizzare i requisiti, in maniera tale da produrre qualche cosa che la macchina capisca e che sia UGUALE per tutti al mondo, perché sono REQUISITI, e non possono essere differenti.

Prima dell'analisi dei requisiti vorrebbe avere l'architettura (immagine di com'è strutturato il sistema in generale), i modelli (diagrammi UML) relativi agli attori (o quello che sono) introdotti nell'architettura; e 1/2 test plan che scaturiscono da un'analisi dei requisiti in ordine di priorità (perché non tutti sono importanti uguali)

Obbiettivo Analisi del Problema: che tutti siano in accordo, perché se la gente è in disaccordo, non si può impostare un progetto (ovvero non si può procedere con la fase successiva).

TO-DO:
1. Dizionario per formalizzare i termini;
2.

Lo scrum goal lo metto dopo che ho fatto l'analisi dei requisiti

includere una valutazione sulla priorità da dare ai requisiti per impostare un piano di lavoro  ed il primo Sprint. L'analisi del problema deve terminare con un modello dell'architettura logica